@page "/login"
@using ToDoApp.Klassen
@using Microsoft.EntityFrameworkCore
@inject Radzen.DialogService dialogService
@inject Radzen.NotificationService notificationService
@inject Radzen.ContextMenuService contextMenuService
@inject Radzen.NotificationService radzenNotification
@inject Radzen.TooltipService tooltipService
@inject ApplicationDbContext DbContext
@inject Userclass Userclass
@inject NavigationManager NavigationManager;

<RadzenRow JustifyContent="@justifyContent" Gap="@gap">
    <RadzenColumn>
        <RadzenText>Nutzername</RadzenText>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenTextBox Name="UserName" @bind-Value="@Userclass.Username" ReadOnly="false" />
    </RadzenColumn>
</RadzenRow>
<br />
<RadzenRow JustifyContent="@justifyContent" Gap="@gap">
    <RadzenColumn>
        <RadzenText>Passwort</RadzenText>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenPassword Name="UserPassword" @bind-Value="@Userclass.Password" ReadOnly="false" />
    </RadzenColumn>
</RadzenRow>
<br />
<RadzenStack>
    <RadzenRow>
        <RadzenColumn>
            <RadzenButton Click="@((args) =>LoginTask())" Variant="Variant.Flat" Text="Login" Style="width: auto" />
        </RadzenColumn>
        <RadzenColumn>
            <RadzenButton Click="@((args) => RegisterAsync())" Variant="Variant.Flat" Text="Registrieren" Style="width: auto" />
        </RadzenColumn>
    </RadzenRow>
    <RadzenText Text="@loginMessage"></RadzenText>
</RadzenStack>

@code {
    #region Parameter
    [Parameter]
    public Userclass User { get; set; }
    #endregion

    #region Member
    string loginMessage = "";
    string gap = "1em";
    JustifyContent justifyContent = JustifyContent.Normal;
    #endregion

    #region Tasks
    #region RegisterAsync
    /// <summary>
    /// Asynchroner Tasks, welcher prüft ob ein Nutzername bereits in der Datenbank vorhanden ist.
    /// Ist der Nutzername noch Verfügbar, wird der Nutzer mit dem Passwort in der Datenbank angelegt und der Nutzer wird eingeloggt
    /// Anderfalls wird der Nutzer darauf hingewiesen, dass der Nutzer bereits existiert.
    /// </summary>
    /// <returns></returns>
    private async Task RegisterAsync()
    {
        Userclass? existingUser = DbContext.Userclasses.Where(dbData => dbData.Username == Userclass.Username).FirstOrDefault();

        if (existingUser == null)
        {
            DbContext.Userclasses.Add(Userclass);
            loginMessage = "User created!";
            await DbContext.SaveChangesAsync();

            // Instant Login new User
            await LoginTask();
        }
        else
        {
            loginMessage = $"Es existiert bereits ein Nutzer mit dem Namen:  \"{Userclass.Username}\"";
        }
    }
    #endregion

    #region LoginTask
    /// <summary>
    /// Überprüft ob ein Nutzer in der Datenbank hinterlegt ist und ob das Passwort mit dem in der Datenbank übereinstimmt.
    /// Wenn ja, wird der Nutzer angemeldet.
    /// Wenn entweder dass Passwort falsch ist oder der Nutzer nicht existiert, wird dem Nutzer die Nachricht "Username oder Passwort sind falsch" angezeigt.
    /// </summary>
    /// <returns></returns>
    private Task LoginTask()
    {
        Userclass? existingUser = DbContext.Userclasses.Where(dbData => dbData.Username == Userclass.Username).FirstOrDefault();

        if (existingUser != null)
        {
            if (existingUser.Password == Userclass.Password)
            {
                Userclass.isLoggedIn = true;
                dialogService.Close(true);
                NavigationManager.NavigateTo("/", true);
            }
            else
            {
                // Passwort ist falsch
            }
        }
        else
        {
            // Kein Nutzer gefunden
        }
        loginMessage = "Username oder Passwort sind falsch";

        return Task.CompletedTask;
    }
    #endregion

    #endregion
}