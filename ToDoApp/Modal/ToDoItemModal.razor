@page "/newItem"
@using ToDoApp.Klassen
@using Microsoft.EntityFrameworkCore
@inject Radzen.DialogService dialogService
@inject Radzen.NotificationService notificationService
@inject Radzen.ContextMenuService contextMenuService
@inject Radzen.NotificationService radzenNotification
@inject Radzen.TooltipService tooltipService
@inject ApplicationDbContext DbContext
@inject Userclass Userclass

@*
    Wir überprüfen beim Aufrufen des Dialoges ob es sich um ein bereits existierenden Task handelt, oder um einen der gerade angelegt wird
*@
@if (ToDoItem.Id > 0)
{
    isNewItem = false;
}
else
{
    // Neues Item, Hat also noch keine ID
}

<RadzenRow JustifyContent="@justifyContent" Gap="@gap">
    <RadzenColumn>
        <RadzenText>Titel</RadzenText>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenTextBox Name="Titel" @bind-Value="@ToDoItem.Title" ReadOnly="false" />
    </RadzenColumn>
</RadzenRow>
<br />
<RadzenRow JustifyContent="@justifyContent" Gap="@gap">
    <RadzenColumn>
        <RadzenText>To Dino ID</RadzenText>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenTextBox Name="To Dino ID" Value="@ToDoItem.Id.ToString()" ReadOnly="true">Test</RadzenTextBox>
    </RadzenColumn>
</RadzenRow>
<br />
<RadzenRow JustifyContent="@justifyContent" Gap="@gap">
    <RadzenColumn>
        <RadzenText>Erstelldatum</RadzenText>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenDatePicker @bind-Value=@ToDoItem.CreationDate ReadOnly=true Name="RadzenDatePickerBindValue" DateFormat="MM/dd/yyyy" ShowCalendarWeek />
    </RadzenColumn>
</RadzenRow>
<br />
<RadzenRow JustifyContent="@justifyContent" Gap="@gap">
    <RadzenColumn>
        <RadzenText>Enddatum</RadzenText>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenDatePicker @bind-Value=@ToDoItem.DueDate Name="RadzenDatePickerBindValue" DateFormat="MM/dd/yyyy" ShowCalendarWeek />
    </RadzenColumn>
</RadzenRow>
<br />
<RadzenRow JustifyContent="@justifyContent" Gap="@gap">
    <RadzenColumn>
        <RadzenText>Kategorie</RadzenText>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenTextBox Name="Kategorie" @bind-Value="@ToDoItem.Category" ReadOnly="false"></RadzenTextBox>
    </RadzenColumn>
</RadzenRow>
<br />
<RadzenRow JustifyContent="@justifyContent" Gap="@gap">
    <RadzenColumn>
        <RadzenText>Erstellt von</RadzenText>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenTextBox Name="Erstellt von" @bind-Value="@ToDoItem.Owner" ReadOnly="true"></RadzenTextBox>
    </RadzenColumn>
</RadzenRow>
<br />
<RadzenRow>
    <RadzenColumn>
        <RadzenText>Beschreibung</RadzenText>
    </RadzenColumn>
    <RadzenColumn>
        <RadzenTextArea Name="Beschreibung" @bind-Value="@ToDoItem.Description" ReadOnly="false"></RadzenTextArea>
    </RadzenColumn>
</RadzenRow>
<br />
<RadzenStack>
    <RadzenRow>
        <RadzenColumn>
            <RadzenButton Click="@((args) =>SaveItem())" Variant="Variant.Flat" Text="Speichern" Style="width: 120px" />
        </RadzenColumn>
        <RadzenColumn>
            <RadzenButton Click="@((args) => dialogService.Close(true))" Variant="Variant.Flat" Text="Abbrechen" Style="width: 120px" />
        </RadzenColumn>
    </RadzenRow>
</RadzenStack>

@code {
    #region Member
    bool isNewItem = true;
    JustifyContent justifyContent = JustifyContent.Normal;
    string gap = "1em";
    #endregion

    #region Parameter
    [Parameter]
    [EditorRequired]
    public ToDoItem ToDoItem { get; set; }
    #endregion

    #region Tasks
    #region SaveItem
    /// <summary>
    /// Wenn ein neues Item entsteht, wird es in die Datenbank aufgenommen
    /// Wenn es ein bestehndes Item ist, wird das Item in der Datenbank aktualisiert
    /// Filtern wir nicht, würden wir beim neu Anlegen eines bestehnden Items versuchen, die gleiche ID zu vergeben und laufen damit in eine Exception
    /// </summary>
    /// <returns></returns>
    private async Task SaveItem()
    {
        if (isNewItem)
        {
            ToDoItem.Owner = Userclass.Username;
            DbContext.ToDoItems.Add(ToDoItem);
        }
        else
        {
            DbContext.ToDoItems.Update(ToDoItem);
        }
        await DbContext.SaveChangesAsync();
        dialogService.Close(true);
    }
    #endregion

    #endregion
}
