@page "/"
@using Microsoft.EntityFrameworkCore
@using ToDoApp.Klassen
@using Radzen.Blazor
@using ToDoApp.Modal
@inject DialogService DialogService
@inject ApplicationDbContext DbContext

<div class="board">
    <RadzenDropZoneContainer TItem="ToDoItem" Data="data"
                             ItemSelector="@ItemSelector"
                             ItemRender="@OnItemRender"
                             CanDrop="@CanDrop"
                             Drop="OnDrop" class="board">
        <ChildContent>
            <div class="left-container">
                <RadzenDropZone Value="Status.NotStarted" class="column not-started" Style="flex: 1; gap: 1rem;">
                        <ChildContent>
                            <RadzenText Text="Not started" TextStyle="TextStyle.Subtitle2" />
                        </ChildContent>
                        <Footer>
                            <div>
                                <RadzenButton Text=@($"Neuer Task") ButtonStyle="ButtonStyle.Secondary" Click=@NewToDoItem />
                            </div>
                        </Footer>
                    </RadzenDropZone>

                    <RadzenDropZone Value="Status.Started" class="column started" Style="flex: 1; gap: 1rem; min-width:fit-content;">
                        <RadzenText Text="Started" TextStyle="TextStyle.Subtitle2" />
                    </RadzenDropZone>
            </div>

            <div class="right-container">
                    <RadzenDropZone Value="Status.Completed" class="column completed" Style="flex: 1; gap: 1rem; min-width:fit-content;">
                        <RadzenText Text="Completed" TextStyle="TextStyle.Subtitle2" />
                    </RadzenDropZone>

                <RadzenDropZone Value="Status.Deleted" class="column delete" Style="flex: 1; gap: 1rem; min-width:fit-content;">
                        <RadzenText Text="Drop here to delete" TextStyle="TextStyle.Subtitle2" />
                    </RadzenDropZone>
            </div>
        </ChildContent>

        <Template>
            <strong>@context.Title</strong>
        </Template>

    </RadzenDropZoneContainer>
</div>
@code {
    IList<ToDoItem>? data;

    // Filter items by zone value
    Func<ToDoItem, RadzenDropZone<ToDoItem>, bool> ItemSelector = (item, zone) => item.Status == (Status)zone.Value && item.Status != Status.Deleted;

    Func<RadzenDropZoneItemEventArgs<ToDoItem>, bool> CanDrop = request =>
    {
        // Allow item drop only in the same zone, in "Deleted" zone or in the next/previous zone.
        return request.FromZone == request.ToZone || (Status)request.ToZone.Value == Status.Deleted ||
               Math.Abs((int)request.Item.Status - (int)request.ToZone.Value) == 1;
    };

    public async Task NewToDoItem()
    {
        ToDoItem newItem = new();
        await DialogService.OpenAsync<ToDoItemModal>("Neuer Task",
               new Dictionary<string, object>() { { "ToDoItem", newItem } },
               new DialogOptions() { Width = "auto", Height = "auto", Resizable = false, Draggable = false });
    }

    void OnItemRender(RadzenDropZoneItemRenderEventArgs<ToDoItem> args)
    {
        args.Attributes["class"] = "task";

        // Do not render item if deleted
        args.Visible = args.Item.Status != Status.Deleted;
    }

    async Task OnDrop(RadzenDropZoneItemEventArgs<ToDoItem> args)
    {
        if (args == null)
        {
            Console.WriteLine("Drop args is null");
            return;
        }

        if (args.FromZone != args.ToZone)
        {
            // update item zone
            args.Item.Status = (Status)args.ToZone.Value;
        }

        if (args.ToItem != null && args.ToItem != args.Item)
        {
            // reorder items in same zone or place the item at specific index in new zone
            data!.Remove(args.Item);
            data.Insert(data.IndexOf(args.ToItem), args.Item);
        }

        await DbContext.SaveChangesAsync();
        await InvokeAsync(StateHasChanged);
    }

    protected override void OnInitialized()
    {
        data = GetDbItems();
    }

    private List<ToDoItem> GetDbItems()
    {
        List<ToDoItem> list = new();

        if (DbContext.ToDoItems.Any<ToDoItem>())
        {
            list = DbContext.ToDoItems.ToList();
        }
        else
        {
            list = new List<ToDoItem>();
        }

        return list;
    }

    public enum Status
    {
        NotStarted,
        Started,
        Completed,
        Deleted
    }
}
