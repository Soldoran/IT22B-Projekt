@page "/"
@using Microsoft.EntityFrameworkCore
@using ToDoApp.Klassen
@using Radzen.Blazor
@using ToDoApp.Modal
@inject DialogService DialogService
@inject ApplicationDbContext DbContext
@inject Userclass Userclass

@* Durch den Singleton "Userclass" prüfen wir, ob ein Nutzer angemeldet ist, wenn dem nicht der Fall ist, wird die Anmeldemaske angezeigt *@
@if (!Userclass.isLoggedIn)
{
    ShowLoginModal();
}

@*
Die Hauptseite der Anwendung
RadzenDropZoneContainer => Eine Komponente, welche als Unterelemte (ChildContent) RadzenDropZones akzeptiert
RadzenDropZones => Die eigentlichen Dropzonen für die einzelnen Items, welche UI-Komponenten als Unterlemente akzeptieren, wie zum Beispiel RadzenText
RadzenCard => Mit diesen werden hier die ToDoItems in den Dropzonen definiert. Wegen Renderfehlern (Items werden Doppelt gelistet) wird diese Komponente versteckt
                              Sie ist jedoch nötig, um den Bearbeitungs-Button hinzuzufügen
*@
<div class="board">
    <RadzenDropZoneContainer TItem="ToDoItem" Data="data"
                             ItemSelector="@ItemSelector"
                             ItemRender="@OnItemRender"
                             CanDrop="@CanDrop"
                             Drop="OnDrop">
        <ChildContent>
            <div class="left-container">
                <div style="position: relative;">
                    <RadzenDropZone Value="Status.NotStarted" class="column not-started" Style="flex: 1; gap: 1rem;">
                        <ChildContent>
                            <RadzenText Text="Offen" TextStyle="TextStyle.DisplayH6" Style="text-align:center;" />
                            @foreach (ToDoItem item in data.Where(i => i.Status == Status.NotStarted))
                            {
                                <RadzenCard Style="margin: 1rem; cursor: grab;" @key="item.Id" hidden="true">
                                    <div class="task-content">
                                        <strong>@item.Title</strong>
                                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" Click="@(args => EditItem(item))" Style="margin-left: 1rem;" />
                                    </div>
                                </RadzenCard>
                            }
                        </ChildContent>
                        <Footer>
                            <div style="position: absolute; bottom: 1em;">
                                <RadzenButton Text="Neuer Task" ButtonStyle="ButtonStyle.Secondary" Click="NewToDoItem" />
                            </div>
                        </Footer>
                    </RadzenDropZone>
                </div>
                <div>
                    <RadzenDropZone Value="Status.Started" class="column started" Style="flex: 1; gap: 1rem; min-width:fit-content;">
                        <RadzenText Text="Angefangen" TextStyle="TextStyle.DisplayH6" Style="text-align:center;" />
                        @foreach (ToDoItem item in data.Where(i => i.Status == Status.Started))
                        {
                            <RadzenCard Style="margin: 1rem; cursor: grab;" @key="item.Id" hidden="true">
                                <div class="task-content">
                                    <strong>@item.Title</strong>
                                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" Click="@(args => EditItem(item))" Style="margin-left: 1rem;" />
                                </div>
                            </RadzenCard>
                        }
                    </RadzenDropZone>
                </div>
            </div>

            <div class="right-container">
                <RadzenDropZone Value="Status.Completed" class="column completed" Style="flex: 1; gap: 1rem; min-width:fit-content;">
                    <RadzenText Text="Fertig" TextStyle="TextStyle.DisplayH6" Style="text-align:center;" />
                    @foreach (ToDoItem item in data.Where(i => i.Status == Status.Completed))
                    {
                        <RadzenCard Style="margin: 1rem; cursor: grab;" @key="item.Id" hidden="true">
                            <div class="task-content">
                                <strong>@item.Title</strong>
                                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" Click="@(args => EditItem(item))" Style="margin-left: 1rem;" />
                            </div>
                        </RadzenCard>
                    }
                </RadzenDropZone>

                <RadzenDropZone Value="Status.Deleted" class="column delete" Style="flex: 1; gap: 1rem; min-width:fit-content;">
                    <RadzenText Text="Zum Löschen hier hin ziehen" TextStyle="TextStyle.DisplayH6" Style="text-align:center;" />
                </RadzenDropZone>
            </div>
        </ChildContent>

        @*
            Stellt die Items in den Dropzones dar, mit denen wir am Ende interargieren
            Hier sagen wir, was als Titel der Karte angezeigt werden soll
        *@
        <Template>
            <div class="task-content">
                <strong>@context.Title</strong>
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Secondary" Click="@(args => EditItem(context))" Style="margin-left: 1rem;" />
            </div>
        </Template>

    </RadzenDropZoneContainer>
</div>

@code {

    #region Member
    // Theoretisch könnten wir hier auch mit dem Datatype List arbeiten, wären dann jedoch auch auf Listen beschränkt.
    // So könnten hier Listen, aber auch Arrays zum Einsatz kommen, was das Programm flexibler in der Gestaltung macht
    IList<ToDoItem>? data;
    #endregion

    #region Delegaten
    // Ein Delegate ist ein Typ, der einen Verweis auf eine Methode speichert. Sie werden verwendet um Methoden als Parameter zu übergeben und
    // Rückruffunktionen zu definieren
    // Sie sind besonders nützlich für Ereignisbehandlung und Situationsabhängige Methodenaufrufe

    // Filtert die Items nach ihren Zonen-Werten
    Func<ToDoItem, RadzenDropZone<ToDoItem>, bool> ItemSelector = (item, zone) => item.Status == (Status)zone.Value && item.Status != Status.Deleted;

    Func<RadzenDropZoneItemEventArgs<ToDoItem>, bool> CanDrop = request =>
    {
        // Erlaubt Items nur auf der gleichen Zone, oder den "Nachbar-Zonen" zu landen
        return request.FromZone == request.ToZone || (Status)request.ToZone.Value == Status.Deleted ||
               Math.Abs((int)request.Item.Status - (int)request.ToZone.Value) == 1;
    };
    #endregion

    #region Tasks
    #region NewToDoItem
    /// <summary>
    /// Erstellt ein neues ToDoItem und ruft den entsprechenden Dialog auf. Wenn der Dialog bestätigt wurde, wird das Item für den Nutzer in der Datenbank hinterlegt.
    /// </summary>
    /// <returns></returns>
    public async Task NewToDoItem()
    {
        ToDoItem newItem = new ToDoItem() { Owner = Userclass.Username };
        newItem.Title = "Neuer Task";
        var result = await DialogService.OpenAsync<ToDoItemModal>(newItem.Title,
               new Dictionary<string, object>() { { "ToDoItem", newItem } },
               new DialogOptions() { Width = "auto", Height = "auto", Resizable = true, Draggable = false, Style = "modal-background" });

        if (result == true)
        {
            data = await DbContext.ToDoItems.Where(dbData => dbData.Owner == Userclass.Username).ToListAsync();
        }

        StateHasChanged();
    }
    #endregion

    #region EditItem
    /// <summary>
    /// Ruft den Item-Dialog für das Item auf um Änderungen vorzunehmen. Wenn der Dialog bestätigt wurde, wird das Item für den Nutzer in der Datenbank aktualisiert.
    /// </summary>
    /// <param name="item"></param>
    /// <returns></returns>
    public async Task EditItem(ToDoItem item)
    {
        var result = await DialogService.OpenAsync<ToDoItemModal>(item.Title,
               new Dictionary<string, object>() { { "ToDoItem", item } },
               new DialogOptions() { Width = "auto", Height = "auto", Resizable = true, Draggable = false, Style = "modal-background" });

        if (result == true)
        {
            data = await DbContext.ToDoItems.Where(dbData => dbData.Owner == Userclass.Username).ToListAsync();
        }

        StateHasChanged();
    }
    #endregion

    #region ShowLoginModal
    /// <summary>
    /// Zeigt die Login-Maske an.
    /// </summary>
    /// <returns></returns>
    public async Task ShowLoginModal()
    {
        var result = await DialogService.OpenAsync<LoginModal>("Anmeldung",
               new Dictionary<string, object>() { { "User", Userclass } },
               new DialogOptions() { Width = "auto", Height = "auto", Resizable = true, Draggable = false, Style = "modal-background" });

        StateHasChanged();
    }
    #endregion

    #region OnDrop
    /// <summary>
    /// Wertet aus, in Welcher Zone das Item abgelegt wird. Wenn sich die Zone ändert, werden die Änderungen in der Datenbank aktualisiert.
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    async Task OnDrop(RadzenDropZoneItemEventArgs<ToDoItem> args)
    {
        if (args == null)
        {
            Console.WriteLine("Drop args is null");
            return;
        }

        if (args.FromZone != args.ToZone)
        {
            // update item zone
            args.Item.Status = (Status)args.ToZone.Value;
        }

        if (args.ToItem != null && args.ToItem != args.Item)
        {
            // reorder items in same zone or place the item at specific index in new zone
            data!.Remove(args.Item);
            data.Insert(data.IndexOf(args.ToItem), args.Item);
        }

        await DbContext.SaveChangesAsync();
        await InvokeAsync(StateHasChanged);
    }
    #endregion

    #endregion

    #region Methods
    #region OnItemRender
    /// <summary>
    /// Entscheidet welche ToDoItems von der Anwendung gerendert werden. Wenn der Status "Status.Deleted" ist, wird das Item nicht angezeigt.
    /// </summary>
    /// <param name="args"></param>
    void OnItemRender(RadzenDropZoneItemRenderEventArgs<ToDoItem> args)
    {
        args.Attributes["class"] = "task";

        // Do not render item if deleted
        args.Visible = args.Item.Status != Status.Deleted;
    }
    #endregion

    #region OnInitialized
    /// <summary>
    /// Wird beim Aufrufen der Seite ausgeführt.
    /// </summary>
    protected override void OnInitialized()
    {
        data = GetDbItems();
    }

    /// <summary>
    /// Lädt Daten von ToDoItems aus der angebundenen Datenbank und gibt diese als Liste zurück.
    /// </summary>
    /// <returns>Eine Liste vom Typ "ToDoItem"</returns>
    private List<ToDoItem> GetDbItems()
    {
        List<ToDoItem> list = new();

        if (DbContext.ToDoItems.Any<ToDoItem>())
        {
            list = DbContext.ToDoItems.Where(dbData => dbData.Owner == Userclass.Username).ToList();
        }
        else
        {
            list = new List<ToDoItem>();
        }

        return list;
    }
    #endregion

    #endregion

    #region Status-Enum
    /// <summary>
    /// Status der ToDoItems
    /// NotStarted (0)
    /// Started (1)
    /// Completed (2)
    /// Deleted (3)
    /// </summary>
    public enum Status
    {
        NotStarted,
        Started,
        Completed,
        Deleted
    }
    #endregion
}